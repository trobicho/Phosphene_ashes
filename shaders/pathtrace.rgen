#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#define M_PI  3.14159265

#include "hostDevice.h"
#include "pathcommon.glsl"

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eImageOut, rgba32f) uniform image2D image;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };
layout(set = 2, binding = eMaterials, scalar) buffer Material_ { Material i[]; } materials;

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(push_constant) uniform _PushConstantRay
{
  PushConstantRay pcRay;
};

float seed = uni.time;
#include "./helper/rand.glsl"
#include "./helper/pathIllumination.glsl"

struct  Ray
{
  vec3  origin;
  vec3  direction;
  vec3  color;
  float intensity;
  float travelDist;
};

void  rayLaunch(const Ray ray)
{
  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.0001;
  float tMax     = 10000.0;

  traceRayEXT(topLevelAS, // acceleration structure
    rayFlags,       // rayFlags
    0xFF,           // cullMask
    0,              // sbtRecordOffset
    0,              // sbtRecordStride
    0,              // missIndex
    ray.origin.xyz,     // ray origin
    tMin,           // ray min range
    ray.direction.xyz,  // ray direction
    tMax,           // ray max range
    0               // payload (location = 0)
  );
}

vec3  brdfDir(const Ray ray, const Material mat)
{
  float dice = rand();
  float diff = 1. - mat.specular;
  vec3  r = reflect(ray.direction, prd.normal);

  if (dice < diff)
  {
    return (normalize(rand_dir(prd.normal)));
  }
  else
  {
    vec3 dir = randPhong(r, mat.shininess);
    return (dir);
  }
}

bool  brdfSample(inout Ray ray)
{
  if (prd.asHit == false)
    return (false);
  ray.color *= prd.color;
  if (length(ray.color) < 0.001)
    return (false);

  float dist = length(ray.origin - prd.hitPos);
  ray.travelDist += dist;

  Material  mat = materials.i[prd.matId];
  ray.color *= mat.transmittance;
  ray.intensity += mat.intensity;

  ray.origin = prd.hitPos;
  ray.direction = brdfDir(ray, mat);
  return (true);
}

void  main() 
{
  randN += pcRay.nbConsecutiveRay * 0.586;
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5) + box_muller() / 2.5;
  const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec3  currentColor = vec3(0);
  if (pcRay.nbConsecutiveRay > 0)
    currentColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;

  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

  Ray ray;
  ray.color = vec3(1.0);
  ray.intensity = 0.0;
  ray.origin = origin.xyz;
  ray.direction = direction.xyz;
  ray.travelDist = 0.0;
  
  rayLaunch(ray);
  vec3 endColor = prd.color;

  if (prd.asHit) 
  {
    for (int i = 1; brdfSample(ray) && i < pcRay.pathMaxRecursion; i++)
    {
      rayLaunch(ray);
    }
    endColor = ray.color * ray.intensity;
  }

  uint  count = pcRay.nbConsecutiveRay;

  vec3  color = (currentColor * count) + endColor;
  color /= count + 1;
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(color, 1.0));
}
