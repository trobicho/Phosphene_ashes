#version 460
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "hostDevice.h"
#include "raycommon.glsl"
#include "helper/illumination.glsl"

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 0, binding = eImageOut, rgba32f) uniform image2D imageOut;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };

layout(set = 2, binding = eGBufferColor, rgba32f) uniform image2D gBufferColor;
layout(set = 2, binding = eGBufferNormal, rgba32f) uniform image2D gBufferNormal;
layout(set = 2, binding = eGBufferDepth, r32f) uniform image2D gBufferDepth;
layout(set = 2, binding = eGBufferMaterial, rg32i) uniform iimage2D gBufferMaterial;

layout(set = 3, binding = eMaterials, scalar) buffer Material_ { Material i[]; } materials;
layout(set = 3, binding = eMeshDescs, scalar) buffer MeshDesc_ { MeshDesc i[]; } meshDescs;
layout(set = 3, binding = eShapeDescs, scalar) buffer ShapeDesc_ { ShapeDesc i[]; } shapeDescs;
layout(set = 4, binding = eLights, scalar) buffer Light_ { Light i[]; } lights;

layout(location = 0) rayPayloadEXT bool isShadowed;

layout(push_constant) uniform _PushConstantRay
{
  PushConstantRay pcRay;
};

struct  Ray {
  vec3 origin;
  vec3 direction;
  vec3 hitPos;
};

struct  PixelInfo {
  vec3  normal;
  int   objId;
  int   matId;
};

vec3 lightCalcul(const Ray ray, const PixelInfo pixelInfo, const Material material, Light light)
{
  float attenuation = 1;

  vec3  lightDir = light.pos - ray.hitPos;
  float lightDistance = length(lightDir);
  lightDir = normalize(lightDir);

  vec3  specular = vec3(0.0);
  vec3  diffuse = vec3(0, 0, 0);
  float dl2 = lightDistance * lightDistance;
  vec3  normal = normalize(pixelInfo.normal);

  vec3  origin = ray.hitPos;

  if (pixelInfo.objId < 0)
  {
    ShapeDesc shape = shapeDescs.i[-pixelInfo.objId];
    origin += pixelInfo.normal * shape.marchingMinDist * 1.5;
  }

  if(dot(normal, lightDir) > 0)
  {
    float tMin   = 0.001;
    float tMax   = lightDistance;
    vec3  rayDir = lightDir;
    uint  flags =
      gl_RayFlagsTerminateOnFirstHitEXT | gl_RayFlagsOpaqueEXT | gl_RayFlagsSkipClosestHitShaderEXT;
    isShadowed = true;
    traceRayEXT(topLevelAS,  // acceleration structure
      flags,       // rayFlags
      0xFF,        // cullMask
      0,           // sbtRecordOffset
      0,           // sbtRecordStride
      1,           // missIndex
      origin,      // ray origin
      tMin,        // ray min range
      rayDir,      // ray direction
      tMax,        // ray max range
      0            // payload (location = 1)
    );
    diffuse = computeDiffuse(material, lightDir, normal);

    if(isShadowed)
      attenuation = 0.0;
    else
      specular = computePhong(material, ray.direction, lightDir, normal);
  }
  return ((diffuse + specular) * (light.intensity / dl2) * attenuation);
}

void main() 
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);

  ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);

  vec3  color = imageLoad(gBufferColor, pixel).xyz;
  vec3  normal = imageLoad(gBufferNormal, pixel).xyz;
  float depth = imageLoad(gBufferDepth, pixel).x;
  int   objId = imageLoad(gBufferMaterial, pixel).x;
  int   matId = imageLoad(gBufferMaterial, pixel).y;
  vec4 finalColor = vec4(color, 1.0);

/*
  if (matId >= 0 )
  {
    PixelInfo pixelInfo = PixelInfo(normal, objId, matId);
    Ray ray = Ray(origin.xyz, direction.xyz, (origin + direction * depth).xyz);
    Material  material = materials.i[matId];

    vec3  lightColor = vec3(0.0);
    for (int l=0; l < pcRay.nbLights; l++) {
      lightColor += lightCalcul(ray, pixelInfo, material, lights.i[l]);
    }
    finalColor = vec4(color * lightColor, 1.0);
  }
*/
 
  imageStore(imageOut, pixel, finalColor);
}
