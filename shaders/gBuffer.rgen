#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "hostDevice.h"
#include "gBufferCommon.glsl"

layout(set = 0, binding = eTlas) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = eGlobals) uniform _GlobalUniforms { GlobalUniforms uni; };

layout(set = 2, binding = eGBufferColor, rgba32f) uniform image2D gBufferColor;
layout(set = 2, binding = eGBufferNormal, rgba32f) uniform image2D gBufferNormal;
layout(set = 2, binding = eGBufferDepth, r32f) uniform image2D gBufferDepth;
layout(set = 2, binding = eGBufferMaterial, r32i) uniform iimage2D gBufferMaterial;

layout(location = 0) rayPayloadEXT hitPayload hit;

void main() 
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
  vec2 d = inUV * 2.0 - 1.0;

  vec4 origin    = uni.viewInverse * vec4(0, 0, 0, 1);
  vec4 target    = uni.projInverse * vec4(d.x, d.y, 1, 1);
  vec4 direction = uni.viewInverse * vec4(normalize(target.xyz), 0);
  
  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.00001;
  float tMax     = 10000.0;

  traceRayEXT(topLevelAS, // acceleration structure
    rayFlags,       // rayFlags
    0xFF,           // cullMask
    0,              // sbtRecordOffset
    0,              // sbtRecordStride
    0,              // missIndex
    origin.xyz,     // ray origin
    tMin,           // ray min range
    direction.xyz,  // ray direction
    tMax,           // ray max range
    0               // payload (location = 0)
  );

  ivec2 pixel = ivec2(gl_LaunchIDEXT.xy);

  imageStore(gBufferColor, pixel, vec4(hit.color, 1.0));
  imageStore(gBufferNormal, pixel, vec4(hit.normal, 1.0));
  imageStore(gBufferDepth, pixel, vec4(hit.depth));
  imageStore(gBufferMaterial, pixel, ivec4(hit.matId));
}
