#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "../hostDevice.h"
#include "marching.glsl"

layout(set = 3, binding = eVdbDescs, scalar) buffer VdbDesc_ { VdbDesc i[]; } vdbDescs;

hitAttributeEXT block {
  vec3  pos;
  vec3  normal;
  uint  step;
  vec3  color;
}attribs;

void  main()
{
  VdbDesc vdb = vdbDescs.i[gl_InstanceCustomIndexEXT];

  Ray ray = {gl_ObjectRayOriginEXT, normalize(gl_ObjectRayDirectionEXT)};

  float maxDist = length(vdb.aabb.max - vdb.aabb.min) + 0.1f;
  float minDist = 0;
  float   dist = hitAabb(vdb.aabb, ray);
  float   distT = 0;
  if (dist > 0) {
    ray.origin = ray.origin + ray.direction * dist;
    distT = dist;
  }
	Hit	hit = Hit(true, ray.origin + ray.direction * 1.0, distT, 1);
	float reportDist = abs(hit.dist) / length(gl_ObjectRayDirectionEXT);
  if (hit.asHit) {
    attribs.pos = hit.pos;
    attribs.step = hit.step;
    if ((gl_IncomingRayFlagsEXT & gl_RayFlagsSkipClosestHitShaderEXT) == 0) {
      Ray   rayNormal = {hit.pos, ray.direction};
      vec3  normal = -ray.direction;
      attribs.normal = normal;
      attribs.color = vec3(1.0, 0.3, 1.0);
    }
	}

	if (reportDist < gl_RayTminEXT)
		reportDist = gl_RayTminEXT;
	//reportIntersectionEXT(reportDist, 1);
	reportIntersectionEXT(reportDist, 1);

	/*
  Hit hit = marching(ray, minDist, maxDist, vdb.marchingMaxStep);
  hit.dist += distT;
  if (hit.asHit) {
    attribs.pos = hit.pos;
    attribs.step = hit.step;
    if ((gl_IncomingRayFlagsEXT & gl_RayFlagsSkipClosestHitShaderEXT) == 0) {
      Ray   rayNormal = {hit.pos, ray.direction};
      vec3  normal = getNormal(rayNormal, minDist);
      attribs.normal = normal;
      attribs.color = getColor(hit);
    }

    float reportDist = abs(hit.dist) / length(gl_ObjectRayDirectionEXT);
    if (reportDist < gl_RayTminEXT)
      reportDist = gl_RayTminEXT;
    reportIntersectionEXT(reportDist, 1);
  }
	*/
}
