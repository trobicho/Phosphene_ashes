#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "raycommon.glsl"
#include "wavefront.glsl"
#include "marchingBasicSD.glsl"

hitAttributeEXT block {
  vec3  pos;
  vec3  normal;
  uint  step;
}attribs;


float sdCross(in vec3 p)
{
  float da = maxcomp(abs(p.xy));
  float db = maxcomp(abs(p.yz));
  float dc = maxcomp(abs(p.zx));
  return min(da,min(db,dc))-1.0;
}

float sdf(in vec3 p)
{
   float d = sdBox(p,vec3(1.0));

   float s = 1.0;
   for( int m=0; m<3; m++ )
   {
      vec3 a = mod( p*s, 2.0 )-1.0;
      s *= 3.0;
      vec3 r = abs(1.0 - 3.0*abs(a));

      float da = max(r.x,r.y);
      float db = max(r.y,r.z);
      float dc = max(r.z,r.x);
      float c = (min(da,min(db,dc))-1.0)/s;

      d = max(d,c);
   }
   return (d);
}

#define MAX_DIST    30.0 
#include "marching.glsl"

void  main()
{
  float   minDist = 0.01;
  uint    maxStep = 200;
  Ray     ray = {gl_ObjectRayOriginEXT, gl_ObjectRayDirectionEXT};

  Sphere  sphere = {vec3(0.f, 0.f, 0.0f), 2.f};
  float   dist = hitSphere(sphere, ray);
  float   distT = dist;
  if (dist > 0) {
    ray.origin = ray.origin + ray.direction * dist;
  }

  Hit hit = marching(ray, minDist, maxStep);
  hit.dist += distT;
  if (hit.asHit) {
    Ray   rayNormal = {hit.pos, ray.direction};
    vec3  normal = getNormal(rayNormal, minDist);
    attribs.pos = hit.pos;
    attribs.normal = normal;
    attribs.step = hit.step;
    reportIntersectionEXT(hit.dist, 1);
  }
}
