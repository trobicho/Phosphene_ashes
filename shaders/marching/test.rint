#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "../raycommon.glsl"
#include "marchingBasicSD.glsl"

hitAttributeEXT block {
  vec3  pos;
  vec3  normal;
  uint  step;
  vec3  color;
}attribs;

#define ITER    15

int last = 0;

float sdCross(in vec3 p)
{
  float da = maxcomp(abs(p.xy));
  float db = maxcomp(abs(p.yz));
  float dc = maxcomp(abs(p.zx));
  return min(da,min(db,dc))-1.0;
}

float sdf(in vec3 p)
{
  float d = sdBox(p,vec3(1.0));
  float s = 2.0;

  vec3 axis = vec3(0.0, 0.0, 1.0);

  for( int m=0; m<ITER; m++ )
  {
    if (m % 3 == 1)
      axis = vec3(1.0, 0.0, 0.0);
    else if (m % 3 == 2)
      axis = vec3(0.0, 1.0, 0.0);
    else
      vec3 axis = vec3(0.0, 0.0, 1.0);
    p = (vec4(p, 1.0) * rotation_matrix(axis, radians(20))).xyz;

    vec3 a = mod( p * s, 2.0 ) - 1.0;
    s *= 3.0;
    vec3 r = abs(1.0 - 3.0 * abs(a));

    float da = max(r.x,r.y);
    float db = max(r.y,r.z);
    float dc = max(r.z,r.x);
    float c = (min(da,min(db,dc)) - 1.0) / s;

    if (d < c)
      last = m%3;
    d = max(d,c);
  }
  return (d);
}

#define MAX_DIST    100.0 
#include "marching.glsl"

vec3  getColor(in Hit hit)
{
  vec3 color = vec3(1.0);

  color /= hit.step / 10;

  if (last == 0)
    color.x *= 3.0;
  else if (last == 1)
    color.y *= 3.0;
  else
    color.z *= 3.0;

  return (color);
}

void  main()
{
  float   minDist = 0.00001;
  uint    maxStep = 3000;
  Ray     ray = {gl_ObjectRayOriginEXT, gl_ObjectRayDirectionEXT};

  Sphere  sphere = {vec3(0.f, 0.f, 0.0f), 5.f};
  float   dist = hitSphere(sphere, ray);
  float   distT = 0;
  if (dist > 0) {
    ray.origin = ray.origin + ray.direction * dist;
    distT = dist;
  }

  Hit hit = marching(ray, minDist, maxStep);
  hit.dist += distT;
  if (hit.asHit) {
    Ray   rayNormal = {hit.pos, ray.direction};
    vec3  normal = getNormal(rayNormal, minDist);
    attribs.pos = hit.pos;
    attribs.normal = normal;
    attribs.step = hit.step;
    attribs.color = getColor(hit);
    reportIntersectionEXT(abs(hit.dist), 1);
  }
}
