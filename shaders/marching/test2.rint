#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_nonuniform_qualifier : enable
#extension GL_EXT_scalar_block_layout : enable
#extension GL_GOOGLE_include_directive : enable

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#include "../raycommon.glsl"
#include "marchingBasicSD.glsl"
#include "marchingBasicShape.glsl"

#define ITER   10

int last = 0;

float sdf(in vec3 p)
{
  float   bailout = 10000.0;
  float   scale = 1.4;
  float   offset = 3.0;

  float   r = dot(p, p);
  mat4    M;
  int     i;
  vec3    c = vec3(0.0, 1.0, 0.0);

  for(i = 0; i < ITER && r < bailout; i++)
  {
    last = i % 3;
    M = rotation_matrix(c, radians(45));
    p = (vec4(p, 1.0) * M).xyz;
    if (p.x + p.y < 0) p.xy = -p.yx;
    if (p.x + p.z < 0) p.xz = -p.zx;
    if (p.y + p.z < 0) p.zy = -p.yz;
    p = p * scale - (scale - 1.0);
    r = dot(p, p);
  }
  return (tetrahedron(p) * pow(scale, -i));
  //return (torus_de(p, 0.5, 0.02) * pow(scale, -i));
}

#include "marching.glsl"

vec3  getColor(in Hit hit)
{
  vec3 color = vec3(1.0 / sqrt(hit.step * 1.0));
  return (color);
}


#include "marchingDefault.glsl"

void  main()
{
  phosDefaultEntryPoint();
}
